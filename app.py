############################################################################################
#–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–æ—Ç–∞, —Ç–∞–π–ø–æ–≤, –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞, –≠–∫–∑–µ–∫—é—Ç–æ—Ä–∞, —Å—Ç—ç–π—Ç–æ–≤, –¢–æ–∫–µ–Ω–æ–≤, –û–±—ã—á–Ω—ã—Ö –∏ –∏–Ω–ª–∞–π–Ω–æ–≤—ã—Ö #–∫–Ω–æ–ø–æ–∫, –ë–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–∞–∫ –¢–µ–∫—Å—Ç –∏ –¥—Ä –º–µ–ª–∫–∏–µ
############################################################################################


from aiogram import Bot, types
from aiogram.types.message import ContentType 
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import state
from aiogram.types.reply_keyboard import ReplyKeyboardMarkup
from aiogram.utils import executor
from config import TOKEN, YOOTOKEN
import client_kb as nav
from aiogram.types import ReplyKeyboardRemove, callback_query, message
import os
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text  
import data_base


#########################################################################
#–§—É–Ω–∫–∏—è –∑–∞–ø—É—Å–∫–∞, –±–æ—Ç–∞, –î–ø, –ú–µ–º–æ—Ä–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –∫–ª–∞—Å–∞ –¥–ª—è –ú–∞—à–∏–Ω—ã —Å–æ—Ç–æ—è–Ω–∏–∏##
#########################################################################


async def on_startup(_):
  print('Bot online')
  data_base.sqlite_start()


storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)


class FSMAdmin(StatesGroup):
  photo = State()
  name = State()
  password = State()
  car = State()


##########################################################################
#–•–µ–Ω–¥–ª—ç—Ä—ã –î–ª—è —Å—Ç–∞—Ä—Ç–∞, –ê–¥–º–∏–Ω–∫–∏ –∏ –ü–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ê–¥–º–∏–Ω–∫–∫—É###############
##########################################################################


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
  await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç {0.first_name} üñê'.format(message.from_user), reply_markup=nav.menu_adm)


@dp.message_handler(Text(equals='–ê–¥–º–∏–Ω–∫–∞', ignore_case=True))
async def admin_panel(message: types.Message):
  await message.reply('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å')

@dp.message_handler(lambda message: '–ê–∑–±–µ—Ä–¥–æ—Å' in message.text)
async def pass_true(message: types.Message):
  await bot.send_message(message.from_user.id,'–•–æ–∑—è–∏–Ω, —á–µ–≥–æ –Ω–∞–¥–æ?', reply_markup=nav.show_buy)


###################################################################################################
#–•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ú–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è: –¥–ª—è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–º–µ–Ω—ã, –î–ª—è –ö—É–ø–∏—Ç—å, –§–æ—Ç–æ, –ü–∞—Ä–æ–ª—è –∏ –ú–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω—ã
###################################################################################################


@dp.message_handler(state="*", commands='–û—Ç–º–µ–Ω–∏—Ç—å')
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∏—Ç—å', ignore_case=True), state="*")
async def buy_cancel(message: types.Message, state: FSMContext):
  current_state = await state.get_state()
  if current_state is None:
    return
  await state.finish()
  await message.reply('–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏', reply_markup=nav.kb_client)


@dp.message_handler(Text(equals='–ö—É–ø–∏—Ç—å', ignore_case=True))
async def buy_start(message: types.Message):
  await FSMAdmin.photo.set()
  await message.reply('–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã', reply_markup=nav.cancel_buy)


@dp.message_handler(content_types=['photo'],state=FSMAdmin.photo)
async def buy_photo(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['photo'] = message.photo[0].file_id
    await FSMAdmin.next()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')


@dp.message_handler(state=FSMAdmin.name)
async def buy_name(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['names'] = str(message.text)
    await FSMAdmin.next()
    await message.reply('–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å')
  

@dp.message_handler(state=FSMAdmin.password)
async def buy_password(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['pass'] = message.text
    await FSMAdmin.next()
    await message.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: \n–°–ø–∞—Ä–∫\n–ö–æ–±–∞–ª—å—Ç\n–ù–µ–∫—Å–∏—è\n–õ–∞—Å–µ—Ç—Ç–∏')


@dp.message_handler(state=FSMAdmin.car)
async def buy_car(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['cars'] = message.text
    await bot.send_message(message.from_user.id,'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=nav.payb)
  await data_base.sql_add_command(state)
  await state.finish()


#####################################################
#–ö–æ–ª–±—ç–∫ –∫–≤–µ—Ä–∏ —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æmoney########
#####################################################


@dp.callback_query_handler(text='–æ–ø–ª–∞—Ç–∏—Ç—å')
async def submonth(call: types.CallbackQuery):
  await bot.delete_message(call.from_user.id, call.message.message_id)
  await bot.send_invoice(chat_id=call.from_user.id, title="–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –º–∞—à–∏–Ω—É", description="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–ª–∞—Ç–∞", payload="pay", provider_token=YOOTOKEN, currency="RUB", start_parameter="test_bot", prices=[{"label": "–†—É–±", "amount": 10000}])


@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
  await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=message.ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: types.Message):
  if message.successful_payment.invoice_payload == "pay":
    await bot.send_message(message.from_user.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏', reply_markup=nav.menu_adm)


###########################################################################
#–ü—É—Å—Ç–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å–ª–æ–≤–∏–π —Å–æ–∑–¥–∞–Ω–∏–π –∫–Ω–æ–ø–æ–∫, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫—É–ø–æ–∫#
###########################################################################


@dp.message_handler()
async def send_message(message: types.Message):
  if message.text == '–ú–µ–Ω—é':
    await bot.send_message(message.from_user.id, '–°–ø–∏—Å–æ–∫ –º–µ–Ω—é', reply_markup=nav.kb_client)
  elif message.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã':
    await message.answer('–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ GM UZBEKISTAN –ê–û –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ –Ω–æ–º–µ—Ä–∞–º:\n 78 1417777\n 71 2156871', reply_markup=nav.menu_btn)
  elif message.text == '–û—Ç–º–µ–Ω–∞':
    await message.answer('–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π', reply_markup=ReplyKeyboardRemove())
  elif message.text == '–ù–∞–∑–∞–¥':
    await message.answer('–ù–∞–∑–∞–¥', reply_markup=nav.menu_adm)
  elif message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–∞—Ö':
    await message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∞—à–∏–Ω—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º', reply_markup=nav.ib)
    await message.answer('–°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω:', reply_markup=nav.menu_btn)
  elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
    await message.answer('–ú–µ–Ω—é', reply_markup=nav.kb_client)
  elif message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∫—É–ø–æ–∫':
      for ret in data_base.cur.execute('SELECT * FROM menu').fetchall():
        await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–ü–∞—Ä–æ–ª—å: {ret[2]}\n–ú–∞—à–∏–Ω–∞: {ret[-1]}', reply_markup=nav.eb)


###########################################################################
#–ö–æ–ª–±—ç–∫ —Ö–µ–Ω–¥–ª—ç—Ä—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∫—É–ø–æ–∫"####################
###########################################################################


@dp.callback_query_handler(text='–ü—Ä–∏–Ω—è—Ç—å')
async def accept_btn(callback: types.CallbackQuery):
  await callback.answer('–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è')


@dp.callback_query_handler(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å')
async def accept_btn(callback: types.CallbackQuery):
  await callback.answer('–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è')


#################################################################################
#–ö–æ–ª–±—ç–∫ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–∞—Ö"###############################
#################################################################################


@dp.callback_query_handler(text='–°–ø–∞—Ä–∫')
async def spark_call(callback: types.CallbackQuery):
  await callback.answer()
  await callback.message.answer('–°–ø–∞—Ä–∫')
  await callback.message.answer('–î–≤–∏–≥–∞—Ç–µ–ª—å:	1.0 –ú–¢\n–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å:	68 –ª.—Å./ 50 –∫–í @ 6400 –û–±/–º–∏–Ω\n–ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç: 89 –ù*–º/4800 –û–±/–º–∏–Ω\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:	151\n–†–∞–∑–≥–æ–Ω 0-100 –∫–º/—á (—Å–µ–∫.):	15.3', reply_markup=nav.menu_btn)


@dp.callback_query_handler(text='–ö–æ–±–∞–ª—å—Ç')
async def spark_call(callback: types.CallbackQuery):
  await callback.answer()
  await callback.message.answer('–ö–æ–±–∞–ª—å—Ç')
  await callback.message.answer('–î–≤–∏–≥–∞—Ç–µ–ª—å, –ª:	1.5 –ú–¢(–ê–¢)\n–ú–∞–∫—Å. –º–æ—â–Ω–æ—Å—Ç—å –∫–í—Ç (–∏–ª–∏ –ª.—Å.) –ø—Ä–∏ ... –æ–±–æ—Ä–æ—Ç–∞—Ö/–º–∏–Ω:	105/5800\n–ú–∞–∫—Å. –∫—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç –ù–º –ø—Ä–∏ ... –æ–±–æ—Ä–æ—Ç–∞—Ö/–º–∏–Ω:	134/4000\n–°–Ω–∞—Ä—è–∂–µ–Ω–Ω–∞—è –º–∞—Å—Å–∞, –∫–≥:	1590', reply_markup=nav.menu_btn)


@dp.callback_query_handler(text='–ù–µ–∫—Å–∏–∞')
async def spark_call(callback: types.CallbackQuery):
  await callback.answer()
  await callback.message.answer('–ù–µ–∫—Å–∏–∞')
  await callback.message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ:	Nexia DOHC\n–°–Ω–∞—Ä—è–∂–µ–Ω–Ω–∞—è –º–∞—Å—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∫–≥, –∫–≥.:	1190/1230\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, –∫–º/—á, –∫–º/—á:	178/179\n–†–∞–∑–≥–æ–Ω –¥–æ 100 –∫–º/—á —Å –º–µ—Å—Ç–∞, c–µ–∫—É–Ω–¥, —Å:	12,2/12,3', reply_markup=nav.menu_btn)


@dp.callback_query_handler(text='–õ–∞—Å–µ—Ç—Ç–∏')
async def spark_call(callback: types.CallbackQuery):
  await callback.answer()
  await callback.message.answer('–õ–∞—Å–µ—Ç—Ç–∏')
  await callback.message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏:	1.8 AT CDX\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –ª.—Å. (–∫–í—Ç) –ø—Ä–∏ –æ–±./–º–∏–Ω.:	122 (90) / 5800\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç, –ù*–º (–∫–≥*–º) –ø—Ä–∏ –æ–±./–º–∏–Ω.:	165 (17) / 4000\n–£–¥–µ–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –∫–≥/–ª.—Å.:	9.59', reply_markup=nav.menu_btn)


#######################################################################################
#–ù—É –∏ —Å–∞–º —ç–∫–∑–µ–∫—é—Ç–æ—Ä —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å dp, —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è#
#######################################################################################


executor.start_polling(dp, skip_updates=True, on_startup=on_startup)